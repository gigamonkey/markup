<body>
    <h1>Markup Specification</h1>
    <p>Markup is a text markup language primarily useful for prose documents such as books and articles. It is designed to be editable in a plain text editor
    <note>
        <p>At least to the extent that Emacs can be considered a plain text editor.</p>
    </note>
     and to allow for arbitrary logical markup. The grammar of a Markup file is defined in terms of a mapping to an abstract syntax tree which can then be rendered into a number of formats, e.g. HTML, PDF, TeX, RTF, etc.</p>
    <h2>Syntax</h2>
    <p>Markup files consist of Unicode text encoded in UTF-8. Lines can be terminated with carriage return (U+000D), carriage-return/line-feed (U+000D U+000A), or line feed (U+000A). Tab characters (U+0009) are equivalent to eight spaces. A blank line (which has a syntactic meaning to be described later) is defined as two consecutive end-of-line sequences possibly with white space between them.
    <note>
        <p>Trailing white space has no meaning in Markup and do not need to be preserved by a Markup processor.</p>
    </note>
     The basic syntax is similar to Markdown and reStructuredText with a bit of TeX thrown in for good measure.</p>
    <h2>Grammar</h2>
    <p>As mentioned above, the Markup grammar defines a mapping between a Markup document and an abstract syntax tree. The tree is built out of tagged elements and strings.
    <note>
        <p>Markup was originally developed in Lisp where the obvious representation for a Markup document is as s-expressions, with each tree represented by a list whose first element is a symbol indicating the tree’s tag.</p>
        <pre>(:body
  (:h1 "This is a header")
  (:p "This is a paragraph")
  (:p "This is another paragraph with some" (:i "italic") " text in it."))</pre>
        <p>This kind of tree structure also has an obvious representation in XML or HTML:</p>
        <pre>&lt;body&gt;
  &lt;h1&gt;This is a header&lt;/h1&gt;
  &lt;p&gt;This is a paragraph&lt;/p&gt;
  &lt;p&gt;This is another paragraph with some &lt;i&gt;italic&lt;/i&gt; text in it.&lt;/p&gt;
&lt;/body&gt;</pre>
    </note>
     The abstract syntax tree is rooted in a single element whose tag is <code>body</code>. Its children are the elements described below.
    <note>
        <p>The element names were, as will be obvious to anyone who knows HTML, chosen so that a trivial mapping from Markup to HTML gives a useful result but other than that pleasant coincidence, Markup defines no particular semantics for Markup documents.</p>
    </note>
    </p>
    <h3>Normal paragraphs</h3>
    <p>Normal paragraphs are simply blocks of text separated by one or more blank lines. They can contain single line breaks, which are converted to spaces during parsing. The body of a paragraph can contain tagged markup as discussed below. The tag of a paragraph node is <code>p</code>.</p>
    <h3>Headers</h3>
    <p>Headers are paragraphs marked as in Emacs outline-mode, with leading <code>*</code>’s followed by a single space. The more stars the lower in the hierarchy the header. The content of the header is everything after the <code>*</code> and the space and is otherwise parsed just like a paragraph. Header nodes are tagged with <code>h<i>n</i></code> where <i>n</i> is the number of stars.</p>
    <h3>Block quotes</h3>
    <p>Block quotes are one of three kinds of “sections” indicated by indentation. A section ends at the end of the file or by the occurrence of a less-indented non-blank line. Sections can also be nested. A block quote is demarcated by two spaces of indentation relative to the enclosing section and can contain their own paragraphs, headers, lists, and verbatim sections. Block quote nodes are tagged with <code>blockquote</code>.</p>
    <h3>Verbatim sections</h3>
    <p>Verbatim sections are indented three spaces relative to the enclosing section. Within a verbatim section all text is captured exactly as is. Verbatim sections are tagged with <code>pre</code>.</p>
    <h3>Lists</h3>
    <p>Lists are demarcated by two spaces of indentation followed by a list marker, either ‘<code>#</code>’ for an ordered (i.e. numbered) list or ‘<code>-</code>’ for an unordered (i.e. bulleted) list. An ordered list is tagged with <code>ol</code> and an unordered list with <code>ul</code>.</p>
    <p>The list marker must be followed by a space and then the text of the first list item. List items are tagged with <code>li</code> and can contain multiple paragraphs, the contents of which are indented to line up under first character of the beginning of the list item. Subsequent items are marked with another list marker in the same column as the original list marker and another space. For example:</p>
    <pre>This is a regular paragraph.

  # This is the first item of a list consisting of one paragraph
    that spans a couple lines.

  # This is the second item.

  # This is the third item.

    This is another paragraph in the third item.

This is another paragraph.</pre>
    <p>Could be rendered in HTML as:</p>
    <pre>&lt;p&gt;This is a regular paragraph.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;This is the first item of a list consisting of one
       paragraph that spans a couple lines.&lt;/p&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;p&gt;This is the second item.&lt;/p&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;p&gt;This is the third item.&lt;/p&gt;

    &lt;p&gt;This is another paragraph in the third item.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is another paragraph.&lt;/p&gt;</pre>
    <h3>Links</h3>
    <p>A Markup processor can optionally support a few bits of syntax to make it more convenient to add hyperlinks to a document. Within normal text (i.e. anywhere but a verbatim section) a link can be indicated by enclosing the text to act as the hyperlink with <code>[]</code>s. This maps to an element tagged <code>link</code>. If the text between the <code>[]</code>s includes a <code>|</code>, the text after the <code>|</code> is wrapped in a <code>key</code> element.</p>
    <p>A paragraph consisting solely of text in <code>[]</code>s followed by zero or more spaces followed by text enclosed in <code>&lt;&gt;</code>s is parsed as an element tagged <code>link_def</code> whose two children are a <code>link</code> element comprising the text between the <code>[]</code>s and a <code>url</code> element comprising the text between the <code>&lt;&gt;</code>s.
    <note>
        <p>The idea is that a Markup backend would render all the in-text <code>link</code> elements as hyperlinks with the <code>link</code> text linking to the URL given in the corresponding <code>link_def</code> element.</p>
    </note>
     A given Markup processor can choose to implement the link syntax or not and, if it does, may provide a way to indicate whether or not it should be used when parsing a given document.</p>
    <h3>Tagged markup</h3>
    <p>For all other markup, Markup uses the TeX-like notation <code>\<i>tagname</i>{<i>stuff</i>}</code>. Tag names can consist of letters, numbers, ‘<code>-</code>’, ‘<code>.</code>’, and ‘<code>+</code>’. Tagged markup can nest so you can have:</p>
    <pre>\i{italic with \b{some bold added} and back to just italic}</pre>
    <p>An element created from tagged markup is tagged with the tagname.</p>
    <p>Certain tag names can be used to mark sub-documents which are parsed differently than simple spans of text. The content of a sub-document—between the opening and closing {}s—is parsed like a document so it will contain at least one paragraph and can contain headers, block quotes, lists, verbatim sections, and even nested sub-documents. Footnotes, for example, are commonly set up to be parsed as sub-documents. For example:</p>
    <pre>This is an example paragraph.\note{This is a footnote whose
reference will appear right after the period before ‘paragraph’.

This is a second paragraph of the footnote.} Now back to the main
paragraph.</pre>
    <p>Note that the blank line separating the paragraphs of the sub-document has no effect on the enclosing paragraph.</p>
    <p>If a sub-document is embedded in a paragraph that is part of an indented section (i.e. a block quote or a list) then subsequent lines of the sub-document should be indented the same as the enclosing paragraph:</p>
    <pre>This is a regular paragraph.

  This is a block quote.\note{This is a footnote within the
  block quote.

  This is a second paragraph in the footnote.} Back to the
  block quote paragraph.</pre>
    <p>A Markup processor will need to provide some more or less convenient way to specify that certain tag names should be parsed as sub-documents rather than character markup.</p>
    <h3>Escapes</h3>
    <p>Outside of verbatim sections, a backslash can escape any character that is not a legal tag name character, stripping it of its syntactic significance. The characters <code>\</code>, <code>{</code>, and <code>}</code> must be escaped whenever they appear outside a verbatim section if they are to be part of the text. Other non-tag-name characters may be escaped anytime, but it is only necessary when they would otherwise have syntactic significance. For example, <code>*</code> does not need to be escaped except at the beginning of a paragraph, where it would otherwise mark the paragraph as a header.</p>
    <pre>* This is a header

\* This is a paragraph that starts with * (note no escape here)
that contains a backslash: \\, an open brace: \{, and a close
brace: \}

  \# This is a block quote paragraph starting with #, not a list.</pre>
    <h3>One last (optional) convenience</h3>
    <p>In the real world, Markup documents are often (usually) edited in Emacs. Emacs has a mechanism whereby a a line starting with <code>-*-</code> indicates a <i>mode line</i> which tells emacs about how to edit the file. For instance, in the Markup sources of this specification, the first line is:</p>
    <pre>-*- mode: markup; -*-</pre>
    <p>A Markup parser can choose to strip such modelines at the top level of a document to save having to strip them out later in processing.</p>
    <h2>Trivial XML backend</h2>
    <p>A complete Markup system consists of a parser that can parse a text file in Markup syntax into a data structure representing the resulting abstract syntax tree and one or more back-ends that can render such a tree into some other form. For the purposes of testing we specify a trivial mapping from a Markup abstract tree to well-formed XML: each Markup element is mapped to an XML element with the same name and with the node children mapped to XML in the same way and string children as text. Thus:</p>
    <pre>* Header 1

** Header 2

Regular paragraph. With \i{italic} text.</pre>
    <p>maps to (indentation for clarity):</p>
    <pre>&lt;body&gt;
  &lt;h1&gt;Header 1&lt;/h1&gt;
  &lt;h2&gt;Header 2&lt;/h2&gt;
  &lt;p&gt;Regular paragraph. With &lt;i&gt;italic&lt;/i&gt; text.&lt;/p&gt;
&lt;/body&gt;</pre>
</body>
